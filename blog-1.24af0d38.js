parcelRequire=function(e,r,n,t){var i="function"==typeof parcelRequire&&parcelRequire,o="function"==typeof require&&require;function u(n,t){if(!r[n]){if(!e[n]){var f="function"==typeof parcelRequire&&parcelRequire;if(!t&&f)return f(n,!0);if(i)return i(n,!0);if(o&&"string"==typeof n)return o(n);var c=new Error("Cannot find module '"+n+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[n][1][r]||r},p.cache={};var l=r[n]=new u.Module(n);e[n][0].call(l.exports,p,l,l.exports,this)}return r[n].exports;function p(e){return u(p.resolve(e))}}u.isParcelRequire=!0,u.Module=function(e){this.id=e,this.bundle=u,this.exports={}},u.modules=e,u.cache=r,u.parent=i,u.register=function(r,n){e[r]=[function(e,r){r.exports=n},{}]};for(var f=0;f<n.length;f++)u(n[f]);if(n.length){var c=u(n[n.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=c:"function"==typeof define&&define.amd?define(function(){return c}):t&&(this[t]=c)}return u}({"Eyc/":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var e={data:function(){return{tags:["Functional","JavaScript"]}},components:{BlogEntry:function(){return require("_bundle_loader")(require.resolve("components/blog-entry"))}}};exports.default=e;
(function(){var e=exports.default||module.exports;"function"==typeof e&&(e=e.options),Object.assign(e,{render:function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("blog-entry",{attrs:{tags:e.tags},scopedSlots:e._u([{key:"tags",fn:function(o){return[n("span",[e._v(e._s(o.tag))])]}}])},[n("template",{slot:"title"},[e._v("First-class function composition in JS and how it changed the way I code")]),n("template",{slot:"id"},[e._v("1")]),n("template",{slot:"content"},[n("p",[e._v("To start off this article we first need to define function composition, which is the process of combining multiple functions into one stream with outputs of one function transmitting to next one. A basic example (with subsequent function executions) will definitely shed more light on the definition.")]),n("pre",[e._v('// Let\'s define 4 functions and compose them together\nconst roundDown = x => Math.floor(x)\nconst convertToDollars = x => `${x}$`\nconst addYouWonText = x => `You won ${x}!`\nconst toUpperCase = x => x.toUpperCase()\n\n// And now for the composition\nconst composedFunction = x => toUpperCase(addYouWonText(convertToDollars(roundDown(x))))\n\n// And now for some data\ncomposedFunction(1000.33) // result: "YOU WON 1000$!"')]),n("p",[e._v("As you can see we have created our first (and of course prettiest) function composition. However, if you look closely on the end of the line with our composition you will see something what may be considered at least slightly disturbing:")]),n("pre",[e._v("))))")]),n("p",[e._v('Ah yes, the almighty 4 parentheses of apocalypse. The more functions you will try to add to composition, the more you will have to struggle with those. You may ask yourself "Is there a rescue for me?" and the answer is "Of course there is!". Here comes the first-class function composition.')]),n("p",[e._v("And what hides under this definition? First-class composition is combining higher-order functions (or functions accepting and/or returning other functions) together. This allows us to naturally create composition flow as we go through all consecutive functions. One of possible solutions is to use an array of functions to define the order of function execution. Let's have a look at an example higher-order function composer utilizing an array of functions.")]),n("pre",[e._v('const functionComposer = functions => {\n  return initialValue => {\n    // Our main iteration function\n    const iterateFunction = (currentFunctionIndex, currentValue) => {\n      if (typeof functions[currentFunctionIndex] !== "undefined") {\n        // Recursing with a next array index and newly calculated value\n        return iterateFunction(currentFunctionIndex + 1, functions[currentFunctionIndex](currentValue))\n      } else {\n        // Returning the value if no next function is found\n        return currentValue\n      }\n    }\n\n    // Initializing tail call recursion\n    return iterateFunction(0, initialValue)\n  }\n}')]),n("p",[e._v("With our newly created function composer our previously mentioned function composition would look like that:")]),n("pre",[e._v("const composedFunction = x => functionComposer([roundDown, convertToDollars, addYouWonText, toUpperCase])")]),n("p",[e._v("This function definition looks much cleaner and is more readable because you can now clearly see the function flow from left to right. And more readable code brings more maintainability and happiness for the future you or any other person reading your code. Isn't it lovely?")]),n("p",[e._v("Function array approach is also used in a popular utility library called "),n("a",{attrs:{href:"https://lodash.com/"}},[e._v("Lodash")]),e._v(' with its "flow" function. Our composed function would look virtually identical:')]),n("pre",[e._v("const composedFunction = x => _.flow([roundDown, convertToDollars, addYouWonText, toUpperCase])")]),n("p",[e._v("There's also an alternative solution if you are using "),n("a",{attrs:{href:"https://babeljs.io/"}},[e._v("Babel")]),e._v(" transpiler - the proposed pipeline operator (link "),n("a",{attrs:{href:"https://babeljs.io/docs/en/next/babel-plugin-proposal-pipeline-operator.html"}},[e._v("here")]),e._v(") inspired by functional languages such as F# or Haskell. It brings in a new operator "),n("code",[e._v("|>")]),e._v(" to take care of combining functions. Our composed function with this operator would look like that:")]),n("pre",[e._v("const composedFunction = x => x |> roundDown |> convertToDollars |> addYouWonText |> toUpperCase")]),n("p",[e._v("Operator lets us clearly see the stream of data flowing through subsequent functions, but for the time being pipeline operator is still in a very early stage of development. That does not mean you shouldn't try it out :).")]),n("p",[e._v("Function composition allowed me to write better and more concise code without unwanted side-effects, unneeded excess of parentheses or illegible chained function executions. There are many more amazing aspects of functional programming which I will surely cover in next entries. Feel free to contact me if you have any questions. But for the time being...")]),n("p",[n("span",[e._v("Stay tuned and ")]),n("strong",[e._v("grab your cups!")])])]),n("template",{slot:"time"},[e._v("2018.11.22 01:10")])],2)},staticRenderFns:[],_compiled:!0,_scopeId:null,functional:void 0});})();
},{"_bundle_loader":"GEX2","components/blog-entry":[["blog-entry.49019e75.js","YP1W"],"blog-entry.49019e75.css","YP1W"]}],"Yded":[function(require,module,exports) {
var t=null;function r(){return t||(t=e()),t}function e(){try{throw new Error}catch(r){var t=(""+r.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);if(t)return n(t[0])}return"/"}function n(t){return(""+t).replace(/^((?:https?|file|ftp):\/\/.+)\/[^\/]+$/,"$1")+"/"}exports.getBundleURL=r,exports.getBaseURL=n;
},{}],"GEX2":[function(require,module,exports) {
var r=require("./bundle-url").getBundleURL;function e(r){Array.isArray(r)||(r=[r]);var e=r[r.length-1];try{return Promise.resolve(require(e))}catch(n){if("MODULE_NOT_FOUND"===n.code)return new u(function(n,i){t(r.slice(0,-1)).then(function(){return require(e)}).then(n,i)});throw n}}function t(r){return Promise.all(r.map(s))}var n={};function i(r,e){n[r]=e}module.exports=exports=e,exports.load=t,exports.register=i;var o={};function s(e){var t;if(Array.isArray(e)&&(t=e[1],e=e[0]),o[e])return o[e];var i=(e.substring(e.lastIndexOf(".")+1,e.length)||e).toLowerCase(),s=n[i];return s?o[e]=s(r()+e).then(function(r){return r&&module.bundle.register(t,r),r}):void 0}function u(r){this.executor=r,this.promise=null}u.prototype.then=function(r,e){return null===this.promise&&(this.promise=new Promise(this.executor)),this.promise.then(r,e)},u.prototype.catch=function(r){return null===this.promise&&(this.promise=new Promise(this.executor)),this.promise.catch(r)};
},{"./bundle-url":"Yded"}],"6mSG":[function(require,module,exports) {
module.exports=function(e){return new Promise(function(n,o){var r=document.createElement("link");r.rel="stylesheet",r.href=e,r.onerror=function(e){r.onerror=r.onload=null,o(e)},r.onload=function(){r.onerror=r.onload=null,n()},document.getElementsByTagName("head")[0].appendChild(r)})};
},{}],"1jqS":[function(require,module,exports) {
module.exports=function(n){return new Promise(function(e,o){var r=document.createElement("script");r.async=!0,r.type="text/javascript",r.charset="utf-8",r.src=n,r.onerror=function(n){r.onerror=r.onload=null,o(n)},r.onload=function(){r.onerror=r.onload=null,e()},document.getElementsByTagName("head")[0].appendChild(r)})};
},{}],0:[function(require,module,exports) {
var b=require("GEX2");b.register("css",require("6mSG"));b.register("js",require("1jqS"));b.load([]).then(function(){require("Eyc/");});
},{}]},{},[0], null)